/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.buw.se4de;

import java.io.IOException;
import java.nio.*;
import java.util.ArrayList;

import org.joml.Matrix4f;
import org.joml.Vector3f;
import org.lwjgl.*;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;

import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryStack.*;
import static org.lwjgl.system.MemoryUtil.*;

public class App {

	// The window handle
	private long window;

	/**
     * System time since last loop.
     */
    private double lastLoopTime;
    /**
     * Used for FPS and UPS calculation.
     */
    private float timeCount;

	private double lastX = 0.0;
	private double lastY = 0.0;

	private boolean mouse_held = false;

	public double getTime() {
        return glfwGetTime();
    }

    /**
     * Returns the time that have passed since the last loop.
     *
     * @return Delta time in seconds
     */
    public float getDelta() {
        double time = getTime();
        float delta = (float) (time - lastLoopTime);
        lastLoopTime = time;
        timeCount += delta;
        return delta;
    }

	public void run() {
		System.out.println("Hello LWJGL " + Version.getVersion() + "!");

		init();
		loop();

		// Free the window callbacks and destroy the window
		glfwFreeCallbacks(window);
		glfwDestroyWindow(window);

		// Terminate GLFW and free the error callback
		glfwTerminate();
		glfwSetErrorCallback(null).free();
	}

	private void init() {
		// Setup an error callback. The default implementation
		// will print the error message in System.err.
		GLFWErrorCallback.createPrint(System.err).set();

		// Initialize GLFW. Most GLFW functions will not work before doing this.
		if ( !glfwInit() )
			throw new IllegalStateException("Unable to initialize GLFW");

		// Configure GLFW
		glfwDefaultWindowHints(); // optional, the current window hints are already the default
		glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE); // the window will stay hidden after creation
		glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE); // the window will be resizable

		// Create the window
		window = glfwCreateWindow(1280, 720, "Hello World!", NULL, NULL);
		if ( window == NULL )
			throw new RuntimeException("Failed to create the GLFW window");

		// Setup a key callback. It will be called every time a key is pressed, repeated or released.
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
				glfwSetWindowShouldClose(window, true); // We will detect this in the rendering loop
		});

		// Get the thread stack and push a new frame
		try ( MemoryStack stack = stackPush() ) {
			IntBuffer pWidth = stack.mallocInt(1); // int*
			IntBuffer pHeight = stack.mallocInt(1); // int*

			// Get the window size passed to glfwCreateWindow
			glfwGetWindowSize(window, pWidth, pHeight);

			// Get the resolution of the primary monitor
			GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());

			// Center the window
			glfwSetWindowPos(
				window,
				(vidmode.width() - pWidth.get(0)) / 2,
				(vidmode.height() - pHeight.get(0)) / 2
			);
		} // the stack frame is popped automatically

		// Make the OpenGL context current
		glfwMakeContextCurrent(window);
		// Enable v-sync
		glfwSwapInterval(1);

		// Make the window visible
		glfwShowWindow(window);
	}

	private void loop() {
		// This line is critical for LWJGL's interoperation with GLFW's
		// OpenGL context, or any context that is managed externally.
		// LWJGL detects the context that is current in the current thread,
		// creates the GLCapabilities instance and makes the OpenGL
		// bindings available for use.
		GL.createCapabilities();

		glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

		Player player = new Player();
		ArrayList<Model> models = new ArrayList<>();
		ArrayList<Model> interactables = new ArrayList<>();
		ArrayList<Model> clickables = new ArrayList<>();

		SDFReader.openSDF("test", models, interactables, clickables);

		GLFWCursorPosCallback cursorPosCallback = new GLFWCursorPosCallback() {
			@Override
			public void invoke(long window, double xpos, double ypos) {
				float xoffset = (float) (xpos - lastX);
				float yoffset = (float) (lastY - ypos);
				lastX = xpos;
				lastY = ypos;

				player.process_mouse(xoffset, yoffset);
			}
		};
		glfwSetCursorPosCallback(window, cursorPosCallback);

		GLFWMouseButtonCallback mouseCallback = new GLFWMouseButtonCallback() {
			@Override
			public void invoke(long window, int button, int action, int mods) {
				if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS) {
					mouse_held = true;
					player.process_click(clickables);
				}
				if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_RELEASE)
					mouse_held = false;
			}
		};
		glfwSetMouseButtonCallback(window, mouseCallback);

		glEnable(GL_DEPTH_TEST);
		glEnable(GL_LIGHTING);
		glEnable(GL_LIGHT0);
		glEnable(GL_NORMALIZE);
		glEnable (GL_TEXTURE_2D);

		Vector3f l_pos = new Vector3f(0.0f, 0.5f, 0.0f);
		FloatBuffer pos = BufferUtils.createFloatBuffer(4);
		pos.put(0, 0.0f);
		pos.put(1, 0.0f);
		pos.put(2, 0.0f);
        pos.put(3, 1.0f);
		FloatBuffer col = BufferUtils.createFloatBuffer(4);
		col.put(0, 2.5f);
        col.put(1, 2.5f);
        col.put(2, 2.5f);
        col.put(3, 1.0f);
		FloatBuffer att = BufferUtils.createFloatBuffer(4);
		att.put(0, 0.0f);
		att.put(1, 0.0f);
		att.put(2, 1.0f);
		glLightfv(GL_LIGHT0, GL_POSITION, pos);
		glLightfv(GL_LIGHT0, GL_DIFFUSE, col);
		glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 0.0f);
		glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION, 0.0f);
		glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION, 1.0f);

		FloatBuffer amb = BufferUtils.createFloatBuffer(4);
		amb.put(0, 0.2f);
		amb.put(1, 0.2f);
		amb.put(2, 0.2f);
		amb.put(3, 1.0f);
		glLightModelfv(GL_LIGHT_MODEL_AMBIENT, amb);


		// Set the clear color
		glClearColor(0.1f, 0.1f, 0.1f, 1.0f);

		lastLoopTime = getTime();

		Matrix4f c_projMatrix = new Matrix4f();
		c_projMatrix.ortho(0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 100.0f);
		Matrix4f l_projMatrix = new Matrix4f();
		Matrix4f l_viewMatrix = new Matrix4f();
		Matrix4f l_modelMatrix = new Matrix4f();
		FloatBuffer fb = BufferUtils.createFloatBuffer(16);

		// Run the rendering loop until the user has attempted to close
		// the window or has pressed the ESCAPE key.
		while ( !glfwWindowShouldClose(window) ) {
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer

			glDisable(GL_LIGHTING);
			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();
			glLoadMatrixf(c_projMatrix.get(fb));
			glMatrixMode(GL_MODELVIEW);
			glLoadIdentity();

			glBegin(GL_LINES);
			glVertex3f(0.5f, 0.48f, 0.0f);
			glVertex3f(0.5f, 0.52f, 0.0f);
			
			glVertex3f(0.48f, 0.5f, 0.0f);
			glVertex3f(0.52f, 0.5f, 0.0f);
			glEnd();

			glEnable(GL_LIGHTING);



			// set light position
			l_projMatrix.setPerspective((float) Math.toRadians(40), 1280.0f / 720.0f, 0.01f, 100.0f);
			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();
			glLoadMatrixf(l_projMatrix.get(fb));

			// Set lookat view matrix
			l_viewMatrix.setLookAt(player.cam.pos.x, player.cam.pos.y, player.cam.pos.z, player.cam.look_at.x, player.cam.look_at.y, player.cam.look_at.z, 0.0f, 1.0f, 0.0f);
			glMatrixMode(GL_MODELVIEW);
			glLoadIdentity();

			l_modelMatrix.translation(l_pos);
			glLoadMatrixf(l_viewMatrix.mul(l_modelMatrix).get(fb));

			glLightfv(GL_LIGHT0, GL_POSITION, pos);

			player.process_input(window, getDelta());
			if (mouse_held) {
				player.process_hold(interactables);
			}

			for (Model m : models) {
				glLoadIdentity();
				m.draw(player.get_cam(), pos);
			}

			// for (Model m : interactables) {
			// 	m.drawBB(player.get_cam());
			// }

			player.do_step();
			
			glfwSwapBuffers(window); // swap the color buffers

			// Poll for window events. The key callback above will only be
			// invoked during this call.
			glfwPollEvents();
		}
	}

	public static void main(String[] args) {
		new App().run();
	}
}
